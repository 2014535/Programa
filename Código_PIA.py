# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sa1kg0ROtHCPXtMwwPtKU7903GCVFy9s
"""

class Conferencia:
    def __init__(self, fecha, hora, tema, ponente, auditorio):
        self.fecha = fecha
        self.hora = hora
        self.tema = tema
        self.ponente = ponente
        self.auditorio = auditorio

class Auditorio:
    def __init__(self, nombre, capacidad):
        self.nombre = nombre
        self.capacidad = capacidad
        self.asistentes = []

class Alumno:
    def __init__(self, matricula, nombre, apellido1, apellido2, fecha_nacimiento, carrera):
        self.matricula = matricula
        self.nombre = nombre
        self.apellido1 = apellido1
        self.apellido2 = apellido2
        self.fecha_nacimiento = fecha_nacimiento
        self.carrera = carrera
        self.eventos_asistidos = []

    def asistir_evento(self, evento):
        if len(evento.auditorio.asistentes) < evento.auditorio.capacidad:
            evento.auditorio.asistentes.append(self)
            self.eventos_asistidos.append(evento)
            print(f"{self.nombre} ha sido registrado para el evento en el auditorio {evento.auditorio.nombre}.")
        else:
            print(f"¡Lo siento, {self.nombre}! El auditorio {evento.auditorio.nombre} está lleno.")

class Registro:
    def __init__(self, asistente, evento):
        self.asistente = asistente
        self.evento = evento

class Acciones:
    def __init__(self):
        self.auditorio_A = Auditorio("Gumersindo Cantú Hinojosa", 2)
        self.auditorio_B = Auditorio("Víctor Gómez", 1)
        self.auditorio_C = Auditorio("Casas Alatriste", 2)

        self.conferencia1 = Conferencia("4 de noviembre", "15:00", "Inteligencia Artificial en los Negocios", "Dr. Álvaro Francisco Salazar", self.auditorio_A)
        self.conferencia2 = Conferencia("5 de noviembre", "9:00", "Uso de la nube para gestión de procesos", "Dr. Manuel Leos", self.auditorio_B)
        self.conferencia3 = Conferencia("5 de noviembre", "14:00", "Industria 4.0 retos y oportunidades", "Dra. Mónica Hernández", self.auditorio_C)

        self.asistentes = []
        self.registros = []


#Para agregar asistente

    def agregar_asistente(self, matricula, nombre, apellido1, apellido2, fecha_nacimiento, carrera):
        nuevo_asistente = Alumno(matricula, nombre, apellido1, apellido2, fecha_nacimiento, carrera)
        self.asistentes.append(nuevo_asistente)
        print(f"Asistente {nombre} agregado.")


#Para eliminar asistente
    def eliminar_asistente(self, matricula):
        asistente_eliminado = next((a for a in self.asistentes if a.matricula == matricula), None)
        if asistente_eliminado:
            self.asistentes.remove(asistente_eliminado)
            print(f"Asistente {asistente_eliminado.nombre} eliminado.")
        else:
            print(f"No se encontró un asistente con la matrícula {matricula}.")


#Para actualizar asistente
    def actualizar_asistente(self, matricula, nuevo_nombre, nuevo_apellido1, nuevo_apellido2, nueva_fecha_nacimiento, nueva_carrera):
        asistente_actualizado = next((a for a in self.asistentes if a.matricula == matricula), None)
        if asistente_actualizado:
            asistente_actualizado.nombre = nuevo_nombre
            asistente_actualizado.apellido1 = nuevo_apellido1
            asistente_actualizado.apellido2 = nuevo_apellido2
            asistente_actualizado.fecha_nacimiento = nueva_fecha_nacimiento
            asistente_actualizado.carrera = nueva_carrera
            print(f"Asistente {asistente_actualizado.nombre} actualizado.")
        else:
            print(f"No se encontró un asistente con la matrícula {matricula}.")


#Para mostrar informacion del asistente
    def mostrar_info_asistente(self, matricula):
        asistente = next((a for a in self.asistentes if a.matricula == matricula), None)
        if asistente:
            print(f"Información de Asistente:\nMatrícula: {asistente.matricula}\nNombre: {asistente.nombre} {asistente.apellido1} {asistente.apellido2}\nFecha de Nacimiento: {asistente.fecha_nacimiento}\nCarrera: {asistente.carrera}")
        else:
            print(f"No se encontró un asistente con la matrícula {matricula}.")


#Para registrar asistente a un evento
    def registrar_asistente_a_evento(self, matricula, conferencia):
        asistente = next((a for a in self.asistentes if a.matricula == matricula), None)
        if asistente:
            if len(conferencia.auditorio.asistentes) < conferencia.auditorio.capacidad:
                conferencia.auditorio.asistentes.append(asistente)
                asistente.eventos_asistidos.append(conferencia)
                nuevo_registro = Registro(asistente, conferencia)
                self.registros.append(nuevo_registro)
                print(f"Asistente {asistente.nombre} registrado para el evento en el auditorio {conferencia.auditorio.nombre}.")
            else:
                print(f"Lo sentimos, {asistente.nombre}, el auditorio {conferencia.auditorio.nombre} está lleno.")
        else:
            print(f"No se encontró un asistente con la matrícula {matricula}.")


#Para eliminar del registro a un asistente
    def eliminar_registro_asistente_a_evento(self, matricula, conferencia):
        asistente = next((a for a in self.asistentes if a.matricula == matricula), None)
        registro_eliminado = next((r for r in self.registros if r.asistente == asistente and r.evento == conferencia), None)
        if asistente and registro_eliminado:
            conferencia.auditorio.asistentes.remove(asistente)
            asistente.eventos_asistidos.remove(conferencia)
            self.registros.remove(registro_eliminado)
            print(f"Registro de {asistente.nombre} eliminado para el evento en el auditorio {conferencia.auditorio.nombre}.")
        else:
            print(f"No se encontró un asistente con la matrícula {matricula} registrado para el evento en el auditorio {conferencia.auditorio.nombre}.")


#Para mostrar informacion del registro del asistente
    def mostrar_info_registro_asistente(self, matricula, conferencia):
        asistente = next((a for a in self.asistentes if a.matricula == matricula), None)
        registro = next((r for r in self.registros if r.asistente == asistente and r.evento == conferencia), None)
        if asistente and registro:
            print(f"Información de Registro:\nAsistente: {asistente.nombre} {asistente.apellido1} {asistente.apellido2}\nEvento: {conferencia.tema}\nFecha: {conferencia.fecha}\nHora: {conferencia.hora}\nAuditorio: {conferencia.auditorio.nombre}")
        else:
            print(f"No se encontró un registro para el asistente con matrícula {matricula} en el evento en el auditorio {conferencia.auditorio.nombre}.")

#Bloque anonimo

acciones = Acciones()

acciones.agregar_asistente("123456", "Paulo", "Solis", "Treviño", "21-01-2023", "LTI")
acciones.agregar_asistente("789012", "Victoria", "Perez", "Gonzales", "17-03-2023", "LA")
acciones.agregar_asistente("345678", "Victor", "Lopez", "Martinez", "31-12-2023", "CP")
acciones.agregar_asistente("563378", "Sofia", "Guerrero", "Fernandez", "31-12-2023", "LNI")

acciones.eliminar_asistente("789012")

acciones.actualizar_asistente("123456", "Paulina", "Solis", "Treviño", "21-01-2023", "LTI")

acciones.mostrar_info_asistente("123456")

acciones.registrar_asistente_a_evento("123456", acciones.conferencia1)
acciones.registrar_asistente_a_evento("345678", acciones.conferencia2)
acciones.registrar_asistente_a_evento("563378", acciones.conferencia3)

acciones.eliminar_registro_asistente_a_evento("123456", acciones.conferencia1)

acciones.mostrar_info_registro_asistente("123456", acciones.conferencia1)